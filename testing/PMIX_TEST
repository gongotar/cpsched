#!/usr/bin/env python

# All rights reserved. This program and the accompanying materials
# are made available under the terms of the BSD-3 license which accompanies this
# distribution in LICENSE.TXT
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the BSD-3  License in
# LICENSE.TXT for more details.
#
# GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
# The Government's rights to use, modify, reproduce, release, perform,
# display, or disclose this software are subject to the terms of the BSD-3
# License as provided in Contract No. B609815.
# Any reproduction of computer software, computer software documentation, or
# portions thereof marked with this legend must also reproduce the markings.
#
# Authors: 
# Stephen Willson <stephen.d.willson@intel.com>
# Christopher Holguin <christopher.a.holguin@intel.com>
#
# (C) Copyright 2015-2016 Intel Corporation.


from subprocess import *
import re
import sys
import os
import shutil
import time
import pwd as PWD

if len(sys.argv) != 5:
    print("usage: " + sys.argv[0] +
          "<path to scr build> "
          "<csv_hostlist> "
          "<path to nl log file> "
          "<path to global log file>")
    exit(1)

path_to_scr = sys.argv[1]
csv_hostlist = sys.argv[2]
nl_logging_files = sys.argv[3]
global_combined_log_file = sys.argv[4]
global_combined_temp_file = global_combined_log_file + "_tmp"
short_sleep = '2'
long_sleep = '5'


def cleanup_nl_log_files():
    # delete the log files on each node
    proc = Popen(['pdsh', '-w', csv_hostlist,
                  'rm', '-rf', nl_logging_files])
    proc.wait()


def combine_nl_log_to_global():
    host_list_array = csv_hostlist.split(',')
    for host in host_list_array:
        try:
            proc = Popen(['pdsh', '-w', host,
                          'cat', nl_logging_files],
                         stdout=PIPE)
            proc.wait()
            file_output = proc.stdout.read()
            print(file_output)
            global_log_fd = open(global_combined_temp_file, 'a')
            global_log_fd.write(file_output)
            global_log_fd.close()
        except (IOError, OSError) as e:
            print("couldn't find node local log file on {0}: {1}"
                  .format(host, str(e)))
            exit(1)


def cleanup_for_new_test():
    cleanup_nl_log_files()
    # open global temp test log file, combine into final file, remove temp file
    try:
        # read the temp file
        global_temp_file_fd = open(global_combined_temp_file, 'r')
        out = global_temp_file_fd.read()
        global_temp_file_fd.close()

        # append the contents of the temp file to the final file
        global_combined_file_fd = open(global_combined_log_file, 'a')
        global_combined_file_fd.write(out)
        global_combined_file_fd.close()

        # remove the temp file
        os.remove(global_combined_temp_file)
    except (IOError, OSError) as e:
        print("couldn't cleanup files: {0}".format(str(e)))
        exit(1)


def cleanup_and_return_log_output():
    combine_nl_log_to_global()
    out_file = open(global_combined_temp_file, 'r+')
    out = out_file.read()
    print(out)
    out_file.close()

    # always call this after each test
    cleanup_for_new_test()
    return out

def internal_print_and_log(input_str):
    try:
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n")
        output_file.write(str(input_str))
        output_file.write("\n")
        output_file.close()
        print(input_str)
    except (IOError, OSError) as e:
        print("couldn't write to log file: {0}".format(str(e)))
        exit(1)
        

def main():

    #region Setup
    path_to_scr_test_api = os.path.join(path_to_scr,
                                        "share/scr/examples/test_api_file")
    internal_print_and_log("SCR_BAT will execute: {0}".format(path_to_scr_test_api))
    ret = 0
    # set up initial enviroment for testing
    os.environ['scrbin'] = os.path.join(os.environ['SCR_INSTALL'], 'bin')
    scrbin = os.environ['scrbin']
    internal_print_and_log("scr_install location: "+os.environ['SCR_INSTALL'])
    internal_print_and_log("scr bin dir: "+scrbin)

    p = Popen([os.path.join(scrbin, 'scr_glob_hosts'),
               '-C', os.environ['PMIX_NODELIST']],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    compressed_hostlist = p.stdout.read()
    internal_print_and_log("compressed: " + compressed_hostlist)


    p = Popen([os.path.join(scrbin, 'scr_glob_hosts'),
               '-n', '1',
               '-h', compressed_hostlist],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()

    os.environ['downnode'] = p.stdout.read()
    
    internal_print_and_log("downnode: "+os.environ['downnode'])


    internal_print_and_log("___")

    p = Popen([os.path.join(scrbin, 'scr_env'),
               '--jobid'],
              stdout=PIPE)
    jobid = p.stdout.read().strip()
    os.environ['jobid'] = jobid
    internal_print_and_log(os.environ['jobid'])
    internal_print_and_log(jobid)

    scr_prefix = os.environ['SCR_PREFIX']
    
    os.environ['prefix_files'] = \
        os.path.join(scr_prefix, ".scr/flush.scr") + " " \
        + os.path.join(scr_prefix, ".scr/halt.scr") + " " \
        + os.path.join(scr_prefix, ".scr/nodes.scr") + " "
    os.environ['SCR_FETCH'] = str(0)
    os.environ['SCR_FLUSH'] = str(0)
    os.environ['SCR_DEBUG'] = str(3)
    os.environ['SCR_LOG_ENABLE'] = str(0)
    os.environ['SCR_JOB_NAME'] = 'scr_bat'
    os.environ['SCR_CACHE_SIZE'] = str(2)

    # determine if we're using latest or a particular build number
    build_number = ""
    output_list = re.findall(r"/\d+/", path_to_scr)
    if len(output_list) > 1:
        internal_print_and_log("unexpected path to scr build (too many numbers), exiting: {0}"
              .format(path_to_scr))
        exit(1)

    if len(output_list) == 1:
        for i in output_list:
            build_number = str(i.replace('/', ''))

    else:
        output_list = re.findall("latest", path_to_scr)
        if len(output_list) == 1:
            internal_print_and_log("must pass a path including the build number (not latest) "
                  "to these scripts")
            exit(1)
        else:
            internal_print_and_log("unexpected path to scr build (too many 'latest' strings): "
                  "{0}".format(path_to_scr))
            exit(1)

    # clean out any cruft from previous runs
    # deletes files from cache and any halt, flush, nodes files
    if os.path.exists(
            os.path.join("/tmp/automation/scr", build_number, "scr_cache")):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   'rm', '-rf',
                   os.path.join(
                       "/tmp/automation/scr",
                       build_number,
                       "scr_cache"),
                   os.path.join(
                       "/tmp/automation/scr/",
                       build_number,
                       "scr_control")])
        p.wait()

    try:
        os.remove(os.path.join(scr_prefix, ".scr/flush.scr"))
    except OSError as err:
        internal_print_and_log("couldn't remove flush.scr files: {0}".format(str(err)))

    try:
        os.remove(os.path.join(scr_prefix, ".scr/halt.scr"))
    except OSError as err:
        internal_print_and_log("couldn't remove halt.scr files: {0}".format(str(err)))

    try:
        os.remove(os.path.join(scr_prefix, ".scr/nodes.scr"))
    except OSError as err:
        internal_print_and_log("couldn't remove nodes.scr files: {0}".format(str(err)))

    try:
        os.remove(os.path.join(scr_prefix, ".scr/index.scr"))
    except OSError as err:
        internal_print_and_log("couldn't remove index.scr files: {0}".format(str(err)))

    p = Popen('rm -rf ' + os.path.join(scr_prefix, "scr.dataset.*"), shell=True)
    p.wait()
        
    tmp_jobid_dir = os.path.join("/tmp", "automation", "scr", build_number,
                                 "scr_cache", os.environ["USER"],
                                 "scr." + jobid)
    ssd_jobid_dir = os.path.join("/ssd", "automation", "scr", build_number,
                                 "scr_cache", os.environ["USER"],
                                 "scr." + jobid)
    #endregion

    #region Test 1
    internal_print_and_log("_______________________")

    # check that a run works
    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()

    output = cleanup_and_return_log_output()

    internal_print_and_log("***********************************************************")
    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([1, 2, 3, 4, 5, 6]):
        internal_print_and_log(".....SCR_BAT test 1 failed")
        ret = 1
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n.....SCR_BAT test 1 failed")
        output_file.write("due to incorrect checkpoint sets being written")
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.close()
    else:
        internal_print_and_log("\n......SCR_BAT test 1 passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 1 passed\n")
        output_file.close()
    #endregion
    
    #region Test 3
    internal_print_and_log("-----------------------------------------------------------")

    # run again, check that checkpoints continue where
    # last run left off

    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()
    output = cleanup_and_return_log_output()

    rebuild_statements = re.findall("[Rr]ebuilt dataset \d+", output)
    rebuilt_datasets = []
    for s in rebuild_statements:
        d = re.search("\d+", s)
        rebuilt_datasets.append(int(d.group(0)))
    if set(rebuilt_datasets) != set([5, 6]):
        internal_print_and_log(rebuilt_datasets)
        internal_print_and_log(".....first rebuild failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n.....SCR_BAT test 3 failed")
        output_file.write("\nfirst rebuild failed")
        output_file.write("\n"+rebuilt_datasets)
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.close()
        ret = 1

    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([7, 8, 9, 10, 11, 12]):
        internal_print_and_log(completed_checkpoints)
        internal_print_and_log(".....continuing test failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n.....SCR_BAT test 3 failed")
        output_file.write("\ncontinuing test failed")
        output_file.write("\n"+completed_checkpoints);
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 3 passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 3 passed\n")
        output_file.close()
    #endregion

    #region Test 4
    internal_print_and_log("-----------------------------------------------------------")

    # delete all files from /ssd on rank 0, run again,
    # check that rebuild works
    if os.path.exists(tmp_jobid_dir):
        shutil.rmtree(tmp_jobid_dir)
    if os.path.exists(ssd_jobid_dir):
        shutil.rmtree(ssd_jobid_dir)

    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])

    p.wait()

    output = cleanup_and_return_log_output()

    rebuild_statements = re.findall("[Rr]ebuilt dataset \d+", output)
    rebuild_xors = re.findall("[Rr]ebuilding.*XOR", output)
    rebuilt_datasets = []
    for s in rebuild_statements:
        d = re.search("\d+", s)
        rebuilt_datasets.append(int(d.group(0)))
    if set(rebuilt_datasets) != set([11, 12]) or len(rebuild_xors) != 2:
        internal_print_and_log(".....SCR_BAT test 4 rebuild from XOR failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT xor rebuilt test 4 passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT xor rebuilt test 4 passed\n")
        output_file.close()

    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([13, 14, 15, 16, 17, 18]):
        internal_print_and_log(completed_checkpoints)
        internal_print_and_log("\n.....SCR_BAT test 4 continuing test failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT continuing test 4 passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 4 passed\n")
        output_file.close()
    #endregion

    #region Test 5
    internal_print_and_log("-----------------------------------------------------------")

    # delete latest checkpoint directory from two nodes,
    # run again, check that rebuild works for older checkpoint
    if os.path.exists(tmp_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-P',
                   '-n', '2',
                   '-N', '1',
                   '-B', short_sleep,
                   '-x', 'CNSS_PREFIX',
                   '-x', 'SCR',
                   '-x', 'LD_LIBRARY_PATH',
                   '-x', 'PATH',
                   "/bin/rm", "-rf",
                   os.path.join(tmp_jobid_dir, "scr.dataset.18")])

        p.wait()
    if os.path.exists(ssd_jobid_dir):

        p = Popen(['scr_pmix_spawn',
                   '-P',
                   '-n', '2',
                   '-N', '1',
                   '-B', short_sleep,
                   '-x', 'CNSS_PREFIX',
                   '-x', 'SCR',
                   '-x', 'LD_LIBRARY_PATH',
                   '-x', 'PATH',
                   "/bin/rm", "-rf",
                   os.path.join(ssd_jobid_dir, "scr.dataset.18")])

        p.wait()

    # We've already tested this
    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()

    output = cleanup_and_return_log_output()


    rebuild_17 = re.search("[Rr]ebuilt dataset \d+", output).group(0).split()
    failure_18 = re.search("[Ff]ailed.*rebuild.*\d+", output).group(0).split()
    if int(rebuild_17[2]) != 17 or int(failure_18[4]) != 18:
        internal_print_and_log("\n.....SCR BAT test 5 did not properly fail on 18 "
              "and rebuild from 17")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n.....SCR BAT test 5 properly failed on 18 and rebuilt from "
              "17")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 5 part 1 passed\n")
        output_file.close()

    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([18, 19, 20, 21, 22, 23]):
        internal_print_and_log(completed_checkpoints)
        internal_print_and_log("\n.....SCR_BAT continuing test failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log(completed_checkpoints)
        internal_print_and_log("\nSCR_BAT continuing test passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 5 part 2 passed\n")
        output_file.close()
    #endregion

    #region Test 6

    internal_print_and_log("-----------------------------------------------------------")
    # delete all files from all nodes, run again,
    # check that run starts over
    if os.path.exists(tmp_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   tmp_jobid_dir])
        p.wait()
    if os.path.exists(ssd_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   ssd_jobid_dir])
        p.wait()

    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()

    output = cleanup_and_return_log_output()


    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([1, 2, 3, 4, 5, 6]):
        internal_print_and_log(completed_checkpoints)
        internal_print_and_log("\n.....SCR_BAT test 6 full-restart test failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\nSCR_BAT test 6 full-restart test passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 6 full-restart test passed\n")
        output_file.close()
    #endregion

    #region Cache/Control dir cleanup
    internal_print_and_log("-----------------------------------------------------------")

    # clear the cache and control directory
    if os.path.exists(tmp_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   tmp_jobid_dir])
        p.wait()
    if os.path.exists(ssd_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   ssd_jobid_dir])
        p.wait()
    for f in os.environ['prefix_files'].split():
        os.remove(f)
    if os.path.exists(os.path.join(os.getcwd(), '.scr', 'halt.scr')):
        ".....failed to remove halt file"
    #endregion

    #region Test 7
    internal_print_and_log("-----------------------------------------------------------")

    # check that scr_list_dir returns good values
    p = Popen([os.path.join(scrbin, 'scr_list_dir'),
               'control'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()

    control = p.stdout.read().strip()
    internal_print_and_log(control)

    if p.returncode != 0:
        internal_print_and_log("\nSCR_BAT test 7.a list_dir control failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 7.a list_dir control failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 7.a list_dir control passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 7.a list_dir control passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_list_dir'),
               '--base',
               'control'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()

    control_base = p.stdout.read().strip()
    internal_print_and_log(control_base)

    idx_end_base = control.find('/', 30)
    if p.returncode != 0 or control_base != control[:idx_end_base]:
        internal_print_and_log("\nSCR_BAT test 7.b list_dir --base control failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 7.b list_dir --base control failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT continuing test 7.b list_dir --base control"
              " passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 7.b list_dir --base control"
                          " passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_list_dir'),
               'cache'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()

    cache = p.stdout.read().strip()
    internal_print_and_log(cache)
    if p.returncode != 0:
        internal_print_and_log("\nSCR_BAT test 7.c list_dir cache failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 7.c list_dir cache failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 7.c list_dir cache passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 7.c list_dir cache passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_list_dir'),
               '--base',
               'cache'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()

    cache_base = p.stdout.read().strip()
    internal_print_and_log(cache_base)

    idx_end_base = cache.find('/', 30)
    if p.returncode != 0 or cache_base != cache[:idx_end_base]:
        internal_print_and_log("\nSCR_BAT test 7.d list_dir --base cache failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 7.d list_dir --base cache failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 7.d list_dir --base cache passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 7.d list_dir --base cache"
                          " passed\n")
        output_file.close()
    #endregion

    #region Test 8
    internal_print_and_log("-----------------------------------------------------------")

    # check that scr_list_down_nodes returns good values
    downnode = os.getenv('downnode')

    p = Popen([os.path.join(scrbin, 'scr_list_down_nodes')],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    internal_print_and_log("scr_list_down_nodes output: "+p.stdout.read().strip())
    if p.returncode != 0 or p.stdout.read().strip() != "":
        internal_print_and_log(".....scr_list_down_nodes failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 8.a list_down_nodes failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 8.a list_down_nodes passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 8.a list_down_nodes passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_list_down_nodes'),
               '--down', downnode],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    out1 = p.stdout.read().strip()
    internal_print_and_log("out1: "+out1)

    p = Popen([os.path.join(scrbin, 'scr_list_down_nodes'),
               '--reason',
               '--down', downnode],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    out2 = p.stdout.read().strip()
    internal_print_and_log("out2: "+out2)

    os.environ['SCR_EXCLUDE_NODES'] = downnode

    p = Popen([os.path.join(scrbin, 'scr_list_down_nodes')],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    out3 = p.stdout.read().strip()
    internal_print_and_log("out3: "+out3)

    p = Popen([os.path.join(scrbin, 'scr_list_down_nodes'),
               '--reason'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    out4 = p.stdout.read().strip()
    internal_print_and_log("out4: "+out4)

    del os.environ['SCR_EXCLUDE_NODES']

    numbers = re.findall("\d+", out1 + out2 + out3 + out3)
    for n in numbers:
        if n != re.search("\d+", downnode).group(0):
            internal_print_and_log("\n.....The listed downnode is inconsistent. "
                  "Only one node should be listed down.")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write("SCR_BAT test 8.b list_dir with exclusions "
                              "failed")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 8.b list_dir with exclusions passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 8.b list_dir with "
                              "exclusions passed\n")
            output_file.close()

    reason1 = out2.find("Specified on command line")
    reason2 = out4.find("User excluded via SCR_EXCLUDE_NODES")
    if reason1 < 0 or reason2 < 0:
        internal_print_and_log("\n.....The down node reasons do not match what they should be")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 8.c downed node: reason failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 8.c downed node: reason passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 8.c downed node: reason "
                          "passed\n")
        output_file.close()
    #endregion

    #region Test 9
    internal_print_and_log("-----------------------------------------------------------")
    # check that scr_halt seems to work
    pwd = os.getcwd()
    halt = os.path.join(scrbin, 'scr_halt')

    p = Popen([halt, '--list', pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_list = p.stdout.read()
    internal_print_and_log(h_list)
    if p.returncode != 0 or h_list.find("None") < 0:
        internal_print_and_log("\n.....scr_halt --list failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.a scr_halt --list failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.a scr_halt --list passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.a scr_halt --list passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, '--before', '3pm today', pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_before = p.stdout.read()
    internal_print_and_log(h_before)
    set_comment_idx = h_before.find("Setting ExitBefore")
    set_list_idx = h_before.find("ExitBefore:")
    if p.returncode != 0 or set_list_idx < 0 or set_comment_idx < 0:
        internal_print_and_log("\n.....scr_halt --before failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.b scr_halt --before failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.b scr_halt --before passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.b scr_halt --before "
                          "passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, '--after', '4pm today', pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_after = p.stdout.read()
    internal_print_and_log(h_after)
    set_comment_idx = h_after.find("Setting ExitAfter")
    list_eb_idx = h_after.find("ExitBefore:")
    list_ea_idx = h_after.find("ExitAfter:")
    if p.returncode != 0 or list_eb_idx < 0 or list_ea_idx < 0 or \
            set_comment_idx < 0:
        internal_print_and_log("\n.....scr_halt --after failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.c scr_halt --after failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.c scr_halt --after passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.c scr_halt --after passed\n")
        output_file.close()

    eb_after = re.findall(".*ExitBefore:.*", h_after)
    eb_before = re.findall(".*ExitBefore:.*", h_before)
    if eb_after[0] != eb_before[0]:
        internal_print_and_log("\n.....before value corrupted between scr_halt --before and "
              "scr_halt --after")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.d failed - 'before' value corrupted"
                          "between scr_halt --before and scr_halt --after.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.d passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.d passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, '--seconds', '1200', pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_seconds = p.stdout.read()
    internal_print_and_log(h_seconds)
    set_comment_idx = h_seconds.find("Setting HaltSeconds")
    list_eb_idx = h_seconds.find("ExitBefore:")
    list_ea_idx = h_seconds.find("ExitAfter:")
    list_s_idx = h_seconds.find("HaltSeconds:")
    if p.returncode != 0 or list_s_idx < 0 or list_eb_idx < 0 or \
            list_ea_idx < 0 or set_comment_idx < 0:
        internal_print_and_log("\n.....scr_halt --seconds failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.e scr_halt --seconds failed.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.e scr_halt --seconds passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.e scr_halt --seconds "
                          "passed\n")
        output_file.close()

    eb_seconds = re.findall(".*ExitBefore:.*", h_seconds)
    eb_before = re.findall(".*ExitBefore:.*", h_before)
    ea_seconds = re.findall(".*ExitAfter:.*", h_seconds)
    ea_after = re.findall(".*ExitAfter:.*", h_after)
    if eb_seconds[0] != eb_before[0] or ea_seconds[0] != ea_after[0]:
        internal_print_and_log(".....before or after value corrupted between scr_halt calls")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.f failed - 'before' or 'after"
                          "value corrupted between scr_halt calls")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.f passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.f passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, '--unset-before', pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_ubefore = p.stdout.read()
    internal_print_and_log(h_ubefore)
    unset_comment_idx = h_ubefore.find("Unsetting ExitBefore")
    list_ea_idx = h_ubefore.find("ExitAfter:")
    list_s_idx = h_ubefore.find("HaltSeconds:")
    if p.returncode != 0 or list_s_idx < 0 or list_ea_idx < 0 or unset_comment_idx < 0:
        internal_print_and_log(".....scr_halt --unset-before failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.g scr_halt --unset-before failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.g scr_halt --unset-before passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.g scr_halt --unset-before "
                          "passed\n")
        output_file.close()

    s_seconds = re.findall(".*HaltSeconds:.*", h_seconds)
    s_ubefore = re.findall(".*HaltSeconds:.*", h_ubefore)
    ea_ubefore = re.findall(".*ExitAfter:.*", h_ubefore)
    ea_after = re.findall(".*ExitAfter:.*", h_after)
    if s_seconds[0] != s_ubefore[0] or ea_ubefore[0] != ea_after[0]:
        internal_print_and_log(".....seconds or after value corrupted between scr_halt calls")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.h failed - 'seconds' or 'after"
                          "value corrupted between scr_halt calls")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.h passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.h passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, '--unset-after', pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_uafter = p.stdout.read()
    internal_print_and_log(h_uafter)
    unset_comment_idx = h_uafter.find("Unsetting ExitAfter")
    list_s_idx = h_ubefore.find("HaltSeconds:")
    if p.returncode != 0 or list_s_idx < 0 or unset_comment_idx < 0:
        internal_print_and_log(".....scr_halt --unset-after failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.i scr_halt --unset-after failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.i scr_halt --unset-after passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.i scr_halt --unset-after"
                          " passed\n")
        output_file.close()

    s_seconds = re.findall(".*HaltSeconds:.*", h_seconds)
    s_uafter = re.findall(".*HaltSeconds:.*", h_uafter)
    if s_seconds[0] != s_uafter[0]:
        internal_print_and_log(".....seconds value corrupted between scr_halt calls")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.j failed - 'seconds' value"
                          "corrupted between scr_halt calls")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.j passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.j passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, '--unset-seconds', pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_useconds = p.stdout.read()
    internal_print_and_log(h_useconds)
    unset_comment_idx = h_useconds.find("Unsetting HaltSeconds")
    list_none = h_useconds.find("None")
    if p.returncode != 0 or list_none < 0 or unset_comment_idx < 0:
        internal_print_and_log(".....scr_halt --unset-seconds failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.k scr_halt --unset-seconds failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.k scr_halt --unset-seconds passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.k scr_halt --unset-seconds"
                          " passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_halt = p.stdout.read()
    internal_print_and_log(h_halt)
    set_comment_idx = h_halt.find("Setting ExitReason")
    list_r_idx = h_halt.find("ExitReason:")
    if p.returncode != 0 or list_r_idx < 0 or set_comment_idx < 0:
        internal_print_and_log(".....scr_halt failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.l scr_halt failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.l scr_halt passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.l scr_halt passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, '--checkpoints', '5', pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_ckpts = p.stdout.read()
    internal_print_and_log(h_ckpts)
    set_comment_idx = h_ckpts.find("Setting CheckpointsLeft")
    list_ckpt_idx = h_ckpts.find("CheckpointsLeft:")
    list_r_idx = h_ckpts.find("ExitReason:")
    if p.returncode != 0 or list_r_idx < 0 or \
            list_ckpt_idx < 0 or set_comment_idx < 0:
        internal_print_and_log(".....scr_halt --checkpoints failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.m scr_halt --checkpoints failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.m scr_halt --checkpoints passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.m scr_halt --checkpoints "
                          "passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, '--unset-checkpoints', pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_uckpts = p.stdout.read()
    internal_print_and_log(h_uckpts)
    unset_comment_idx = h_uckpts.find("Unsetting CheckpointsLeft")
    list_r_idx = h_uckpts.find("ExitReason:")
    if p.returncode != 0 or list_r_idx < 0 or unset_comment_idx < 0:
        internal_print_and_log(".....scr_halt --unset-checkpoints failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.n scr_halt --unset-checkpoints "
                          "failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.n scr_halt --unset-checkpoints passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.n scr_halt "
                          "--unset-checkpoints passed\n")
        output_file.close()

    r_halt = re.findall(".*ExitReason:.*", h_halt)
    r_uckpts = re.findall(".*ExitReason:.*", h_uckpts)
    if r_halt[0] != r_uckpts[0]:
        internal_print_and_log(".....exit reason corrupted between scr_halt calls")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.o failed - exit reason corrupted "
                          "between scr_halt calls")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.o passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.o passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, '--unset-reason', pwd],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    h_ureason = p.stdout.read()
    internal_print_and_log(h_ureason)
    unset_comment_idx = h_ureason.find("Unsetting ExitReason")
    list_none = h_ureason.find("None")
    if p.returncode != 0 or list_none < 0 or unset_comment_idx < 0:
        internal_print_and_log(".....scr_halt --unset-reason failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 9.p scr_halt --unset-reason failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 9.p scr_halt --unset-reason passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 9.p scr_halt --unset-reason"
                          " passed\n")
        output_file.close()

    time.sleep(5)

    p = Popen([halt, '--remove', pwd])
    p.wait()
    #endregion

    #region Test 10
    internal_print_and_log("-----------------------------------------------------------")

    # check that scr_env seems to work
    p = Popen([os.path.join(scrbin, 'scr_env'),
               '--user'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read().strip()
    internal_print_and_log(output)

    if output != PWD.getpwuid(os.getuid()).pw_name:
        internal_print_and_log(".....scr_env --user failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 10.a scr_env --user failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 10.a scr_env --user passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 10.a scr_env --user passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_env'),
               '--jobid'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read().strip()
    internal_print_and_log(output)
    if output != jobid:
        internal_print_and_log(".....scr_env --jobid failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 10.b scr_env --jobid failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 10.b scr_env --jobid passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 10.b scr_env --jobid passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_env'),
               '--nodes'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read().strip()
    internal_print_and_log("scr_env --nodes output: " + output)

    if output != compressed_hostlist:
        internal_print_and_log(".....scr_env --nodes failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 10.c scr_env --nodes failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 10.c scr_env --nodes passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 10.c scr_env --nodes passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_env'),
               '--down'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read().strip()
    internal_print_and_log(output)
    if output != "":
        internal_print_and_log(".....scr_env --down failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 10.d scr_env --down failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 10.d scr_env --down passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 10.d scr_env --down passed\n")
        output_file.close()
    # We report an error if any node is down. We don't want to test with down
    # nodes and no live node should be specified down by the system
    #endregion

    #region Test 11
    internal_print_and_log("-----------------------------------------------------------")

    # check that scr_prerun works
    p = Popen([os.path.join(scrbin, 'scr_prerun')])
    p.wait()
    if p.returncode != 0:
        internal_print_and_log(".....scr_prerun returned an error code")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 11 scr_prerun failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 11 scr_prerun passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 11 scr_prerun passed\n")
        output_file.close()
    #endregion

    #region Test 12
    internal_print_and_log("-----------------------------------------------------------")

    # check that scr_postrun works (w/ empty cache)
    p = Popen([os.path.join(scrbin, 'scr_postrun')],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    find_failure = re.search(".*scr_postrun.*no dataset.*scavange", output)
    if find_failure:
        internal_print_and_log(".....scr_postrun with an empty cache did not properly identify "
              "that it could not scavenge.")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 12 failed, scr_postrun with an "
                          "empty cache did not properly identify that it"
                          "could not scavenge.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 12 passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 12 passed\n")
        output_file.close()
    #endregion

    #region Test 13
    internal_print_and_log("-----------------------------------------------------------")

    # clear the cache, make a new run, and check that scr_postrun scavenges
    # successfully (no rebuild)
    if os.path.exists(tmp_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   tmp_jobid_dir])
        p.wait()
    if os.path.exists(ssd_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   ssd_jobid_dir])
        p.wait()

    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()
    output = cleanup_and_return_log_output()


    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([1, 2, 3, 4, 5, 6]):
        internal_print_and_log(completed_checkpoints)
        internal_print_and_log(".....test_api failed before calling scr_postrun")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 13.a test_api before calling "
                          "scr_postrun failed.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 13.a test_api before calling scr_postrun"
              " passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 13.a test_api before calling "
                          "scr_postrun passed\n")
        output_file.close()

    # For some reason this is necessary?
    # HYPOTHESIS: something is being written slowly by python, and postrun
    # interferes if called too soon
    time.sleep(5)

    p = Popen([os.path.join(scrbin, 'scr_postrun')],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    if p.returncode != 0:
        internal_print_and_log(".....scr_postrun returned an error code")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 13.b scr_postrun failed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 13.b scr_postrun passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 13.b scr_postrun passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_index'),
               '--list'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    list_line = re.search("\*.*", output)
    if list_line:
        list_line = list_line.group(0).split()
        if list_line[1] != "6" or list_line[2] != "YES":
            internal_print_and_log(".....scr_index --list failed or scr_postrun failed to "
                  "scavenge properly")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write("SCR_BAT test 13.c scr_index --list failed or "
                              "scr_postrun failed to scavenge properly")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 13.c passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 13.c passed\n")
            output_file.close()
    else:
        internal_print_and_log(".....scr_index --list failed or scr_postrun failed to scavenge "
              "properly")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 13.c scr_index --list failed or "
                          "scr_postrun failed to scavenge properly")
        output_file.close()
        ret = 1
    #endregion

    #region Test 14
    internal_print_and_log("-----------------------------------------------------------")

    # fake a down node via EXCLUDE_NODES and redo above test
    # (check that rebuild during scavenge works)
    os.environ['SCR_EXCLUDE_NODES'] = downnode
    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()
    output = cleanup_and_return_log_output()


    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([7, 8, 9, 10, 11, 12]):
        internal_print_and_log(completed_checkpoints)
        internal_print_and_log(".....test_api failed before calling scr_postrun")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 14.a test_api failed before "
                          "calling scr_postrun.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 14.a test_api before calling scr_postrun"
              " passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 14.a test_api before calling "
                          "scr_postrun passed\n")
        output_file.close()

    # For some reason this is necessary?
    # HYPOTHESIS: something is being written slowly by python, and postrun
    # interferes if called to soon
    time.sleep(2)

    p = Popen([os.path.join(scrbin, 'scr_postrun')],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    if p.returncode != 0:
        internal_print_and_log(".....scr_postrun returned an error code")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 14.b failed - scr_postrun returned "
                          "an error code")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 14.b scr_postrun passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 14.b scr_postrun passed\n")
        output_file.close()

    del os.environ['SCR_EXCLUDE_NODES']

    p = Popen([os.path.join(scrbin, 'scr_index'),
               '--list'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    current_line = re.search("\*.*", output)
    six_line = re.search(".* 6 .*", output)
    if current_line and six_line:
        current_line = current_line.group(0).split()
        six_line = six_line.group(0).split()
        if current_line[1] != "12" or six_line[0] != "6" or \
                six_line[1] != "YES":
            internal_print_and_log(".....scr_index --list failed or scr_postrun failed to "
                  "scavenge properly")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write(
                "SCR_BAT test 14.c failed - scr_index --list failed or "
                "scr_postrun failed to scavenge properly")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 14.c passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 14.c passed\n")
            output_file.close()

        if current_line[2] != "YES":
            internal_print_and_log(".....scr_postrun failed to rebuild dataset from partial "
                  "scavenge")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write(
                "SCR_BAT test 14.d failed - scr_postrun failed to rebuild "
                "dataset from partial scavenge")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 14.d passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 14.d passed\n")
            output_file.close()
    else:
        internal_print_and_log(".....scr_index --list failed or scr_postrun failed to scavenge "
              "properly")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 14.e failed - scr_index --list "
                          "failed or scr_postrun failed to scavenge properly")
        output_file.close()
        ret = 1
    #endregion

    #region Test 15
    internal_print_and_log("-----------------------------------------------------------")

    # delete all files, enable fetch, run again, check that fetch succeeds
    if os.path.exists(tmp_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   tmp_jobid_dir])
        p.wait()
    if os.path.exists(ssd_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   ssd_jobid_dir])
        p.wait()

    os.environ['SCR_FETCH'] = '1'

    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()
    output = cleanup_and_return_log_output()

    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([13, 14, 15, 16, 17, 18]):
        internal_print_and_log(".....test_api failed to fetch checkpoint 12")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 15.a failed - test_api failed to "
                          "fetch checkpoint 12")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 15.a passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 15.a passed\n")
        output_file.close()

    attempted_fetch = re.search(".*[Aa]ttempting.*fetch.*dataset.*12", output)
    if not attempted_fetch:
        internal_print_and_log(".....Did not attempt to fetch checkpoint 12. If delete failed, "
              "may have restarted from cache")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 15.b failed - did not attempt to "
                          "fetch checkpoint 12. If delete failed, may have "
                          "restarted from cache.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 15.b passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 15.b passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_index'),
               '--list'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    current_line = re.search("\*.*", output)
    six_line = re.search(".* 6 .*", output)
    if current_line and six_line:
        current_line = current_line.group(0).split()
        six_line = six_line.group(0).split()
        if current_line[1] != "12" or six_line[0] != "6" or \
                six_line[1] != "YES":
            internal_print_and_log(".....scr_index --list failed, index corrupted, or "
                  "accidental scavenge")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write("SCR_BAT test 15.c failed - scr_index --list "
                              "failed, index corrupted or accidental scavenge")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 15.c passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 15.c passed\n")
            output_file.close()
        if current_line[2] != "YES":
            internal_print_and_log(".....scr_postrun failed to rebuild dataset from partial "
                  "scavenge")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write("SCR_BAT test 15.d failed - scr_postrun failed "
                              "to rebuild dataset from partial scavenge")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 15.d passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 15.d passed\n")
            output_file.close()

        internal_print_and_log("\n......SCR_BAT test 15.e passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 15.e passed\n")
        output_file.close()
    else:
        internal_print_and_log(".....scr_index --list failed or scr_postrun failed to scavenge "
              "properly")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 15.e failed - scr_index --list failed "
                          "or scr_postrun failed to scavenge properly.")
        output_file.close()
        ret = 1

    num_entries = len(re.findall(".* \d+ .*", output))
    if num_entries != 2:
        internal_print_and_log(".....wrong number of index entries")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 15.f failed - wrong number of index "
                          "entries")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 15.f passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 15.f passed\n")
        output_file.close()
    #endregion

    #region Test 16
    internal_print_and_log("-----------------------------------------------------------")

    # delete all files from 2 nodes, run again, check that
    # distribute fails but fetch succeeds
    if os.path.exists(tmp_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '2',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   tmp_jobid_dir])
        p.wait()
    if os.path.exists(ssd_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '2',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   ssd_jobid_dir])
        p.wait()

    os.environ['SCR_FETCH'] = '1'

    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()
    output = cleanup_and_return_log_output()


    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([13, 14, 15, 16, 17, 18]):
        internal_print_and_log(".....test_api failed to fetch checkpoint 12")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 16.a failed - test_api failed to "
                          "fetch checkpoint 12")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 16.a passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 16.a passed\n")
        output_file.close()

    attempted_fetch = re.search(".*[Aa]ttempting.*fetch.*dataset.*12", output)
    if not attempted_fetch:
        internal_print_and_log(".....Did not attempt to fetch checkpoint 12. Most likely "
              "rebuilt")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 16.b failed - Did not attempt to "
                          "fetch checkpoint 12. Most likely rebuilt")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 16.b passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 16.b passed\n")
        output_file.close()

    failures = re.findall("[Ff]ailed.*rebuild.*dataset.*\d+", output)
    fail_numbers = []
    for fail_line in failures:
        failure = re.search("\d+", fail_line)
        if failure:
            fail_numbers.append(int(failure.group(0)))
    if set(fail_numbers) != set([17, 18]):
        internal_print_and_log(".....Did not fail to rebuild datasets 17 and 18")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 16.c failed - Did not fail to "
                          "rebuild datasets 17 and 18")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 16.c passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 16.c passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_index'),
               '--list'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    current_line = re.search("\*.*", output)
    six_line = re.search(".* 6 .*", output)
    if current_line and six_line:
        current_line = current_line.group(0).split()
        six_line = six_line.group(0).split()
        if current_line[1] != "12" or six_line[0] != "6" or \
                six_line[1] != "YES":
            internal_print_and_log(".....scr_index --list failed, index corrupted, or "
                  "accidental scavenge")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write("SCR_BAT test 16.d failed - scr_index --list "
                              "failed, index corrupted, or accidental "
                              "scavenge")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 16.d passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 16.d passed\n")
            output_file.close()
        if current_line[2] != "YES":
            internal_print_and_log(".....scr_postrun failed to rebuild dataset from partial "
                  "scavenge")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write("SCR_BAT test 16.e failed - scr_postrun failed "
                              "to rebuild dataset from partial scavenge")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 16.e passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 16.e passed\n")
            output_file.close()

        internal_print_and_log("\n......SCR_BAT test 16.f passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 16.f passed\n")
        output_file.close()
    else:
        internal_print_and_log(".....scr_index --list failed or scr_postrun failed to scavenge "
              "properly")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 16.f failed - scr_index --list "
                          "failed or scr_postrun failed to scavenge properly")
        output_file.close()
        ret = 1

    num_entries = len(re.findall(".* \d+ .*", output))
    if num_entries != 2:
        internal_print_and_log(".....wrong number of index entries")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 16.g failed - wrong number of "
                          "index entries")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 16.g passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 16.g passed\n")
        output_file.close()
    #endregion

    #region Test 17
    internal_print_and_log("-----------------------------------------------------------")

    # delete all files, corrupt file on disc, run again, check that fetch of
    # current fails but old succeeds
    if os.path.exists(tmp_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   tmp_jobid_dir])
        p.wait()
    if os.path.exists(ssd_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   ssd_jobid_dir])
        p.wait()

    p = Popen(['sed', '-i', 's/\?/i/',
               os.path.join(scr_prefix, "scr.dataset.12/rank_2.ckpt")])
    p.wait()
    if p.returncode != 0:
        internal_print_and_log(".....Error in sed call")
        ret = 1
    
    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()
    output = cleanup_and_return_log_output()


    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([7, 8, 9, 10, 11, 12]):
        internal_print_and_log(".....test_api did not properly revert to checkpoint 6")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 17.a failed - test_api did not "
                          "properly revert to checkpoint 6")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 17.a passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 17.a passed\n")
        output_file.close()

    fetch_fail = re.search(".*CRC32.*fetch.*dataset.*12", output)
    if not fetch_fail:
        internal_print_and_log(".....Dataset 12 not properly corrupted")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 17.b failed - Dataset 12 not properly "
                          "corrupted")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 17.b passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 17.b passed\n")
        output_file.close()

    attempted_fetch = re.search(".*[Aa]ttempting.*fetch.*dataset.*6", output)
    if not attempted_fetch:
        internal_print_and_log(".....Did not attempt to fetch checkpoint 6.")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 17.c failed - Did not attempt to "
                          "fetch checkpoint 6.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 17.c passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 17.c passed\n")
        output_file.close()

    p = Popen([scrbin + '/scr_index', '--list'], stderr=STDOUT, stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    current_line = re.search("\*.*", output)
    twelve_line = re.search(".* 12 .*", output)
    if current_line and twelve_line:
        current_line = current_line.group(0).split()
        twelve_line = twelve_line.group(0).split()
        if current_line[1] != "6" or twelve_line[0] != "12" or \
                current_line[2] != "YES":
            internal_print_and_log(".....scr_index --list failed or index corrupted")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write("SCR_BAT test 17.d failed - scr_index --list "
                              "failed or index corrupted.")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 17.d passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 17.d passed\n")
            output_file.close()
        if twelve_line[1] != "NO":
            internal_print_and_log(".....scr failed to mark dataset 12 as invalid")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write("SCR_BAT test 17.e failed - scr failed to mark "
                              "dataset 12 as invalid.")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 17.e passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 17.e passed\n")
            output_file.close()

        internal_print_and_log("\n......SCR_BAT test 17.f passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 17.f passed\n")
        output_file.close()
    else:
        internal_print_and_log(".....scr_index --list failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 17.f failed - scr_index --list "
                          "failed.")
        output_file.close()
        ret = 1

    num_entries = len(re.findall(".* \d+ .*", output))
    if num_entries != 2:
        internal_print_and_log(".....wrong number of index entries")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 17.g failed - wrong number of index "
                          "entries.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 17.g passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 17.g passed\n")
        output_file.close()
    #endregion

    #region Test 18
    internal_print_and_log("-----------------------------------------------------------")

    # enable flush, run again and check that flush succeeds
    # and that postrun realizes that


    os.environ['SCR_FLUSH'] = '10'

    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()
    output = cleanup_and_return_log_output()


    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([13, 14, 15, 16, 17, 18]):
        internal_print_and_log(".....test_api did not properly continue from checkpoint 12")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 18.a failed - test_api did not "
                          "properly continue from checkpoint 12")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 18.a passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 18.a passed\n")
        output_file.close()

    flush = re.search(".*[Ff]lush.*dataset.*18.*succe", output)
    if not flush:
        internal_print_and_log(".....failed to flush dataset 18.")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 18.b failed - failed to flush "
                          "dataset 18")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 18.b passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 18.b passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_postrun')],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    if p.returncode != 0:
        internal_print_and_log(".....scr_postrun returned an error code")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 18.c failed - scr_postrun returned "
                          "an error code")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 18.c passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 18.c passed\n")
        output_file.close()

    recognized_flush = re.search(".*[Dd]ataset.*already.*flushed", output)
    if not recognized_flush:
        internal_print_and_log(".....scr_postrun did not recognize that dataset 18 had been "
              "flushed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 18.d failed - scr_postrun did not "
                          "recognize that dataset 18 had been flushed")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 18.d passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 18.d passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_index'),
               '--list'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    current_line = re.search("\*.*", output)
    twelve_line = re.search(".* 12 .*", output)
    six_line = re.search(".* 6 .*", output)
    if current_line and twelve_line and six_line:
        current_line = current_line.group(0).split()
        twelve_line = twelve_line.group(0).split()
        six_line = six_line.group(0).split()
        if current_line[1] != "18" or twelve_line[0] != "12" or \
                six_line[0] != "6":
            internal_print_and_log(".....scr_index --list failed, incorrect datasets recorded")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write("SCR_BAT test 18.e failed - scr_index --list "
                              "failed, incorrect datasets recorded")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 18.e passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 18.e passed\n")
            output_file.close()
        if twelve_line[1] != "NO" or six_line[1] != "YES" or \
                current_line[2] != "YES":
            internal_print_and_log(".....scr failed to mark dataset 12 as invalid and "
                  "datasets 6 and 18 as valid")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write("SCR_BAT test 18.f failed - scr failed to mark "
                              "dataset 12 as invalid and datasets 6 and 18 "
                              "as valid")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 18.f passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 18.f passed\n")
            output_file.close()

        internal_print_and_log("\n......SCR_BAT test 18.g passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 18.g passed\n")
        output_file.close()
    else:
        internal_print_and_log(".....scr_index --list failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 18.g failed - scr_index --list failed")
        output_file.close()
        ret = 1

    num_entries = len(re.findall(".* \d+ .*", output))
    if num_entries != 3:
        internal_print_and_log(".....wrong number of index entries")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 18.h failed - wrong number of index "
                          "entries")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 18.h passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 18.h passed\n")
        output_file.close()
    #endregion

    #region Test 19
    internal_print_and_log("-----------------------------------------------------------")

    # clear cache and check that scr_srun works
    if os.path.exists(tmp_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   tmp_jobid_dir])
        p.wait()
    if os.path.exists(ssd_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   ssd_jobid_dir])
        p.wait()

    p = Popen(['rm', '-f', os.environ['prefix_files']])
    p.wait()

    p = Popen(['scr_pmix_run_bash',
               '-p',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    temp_text = p.stdout.read()

    output = cleanup_and_return_log_output()

    internal_print_and_log(temp_text)
    output += temp_text

    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([19, 20, 21, 22, 23, 24]):
        internal_print_and_log(".....test_api did not properly continue from checkpoint 18")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 19.a failed - test_api did not "
                          "properly continue from checkpoint 18.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 19.a passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 19.a passed\n")
        output_file.close()
    time.sleep(1)

    prerun = output.find("scr_prerun")
    if prerun < 0:
        internal_print_and_log(".....scr_srun did not call scr_prerun")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 19.b failed - scr_srun did not call "
                          "scr_prerun.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 19.b passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 19.b passed\n")
        output_file.close()

    postrun = output.find("scr_postrun")
    if postrun < 0:
        internal_print_and_log(".....scr_srun did not call scr_postrun")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 19.c failed - scr_srun did not call "
                          "scr_postrun.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 19.c passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 19.c passed\n")
        output_file.close()

    something_failed = re.search("exit.*[1-9]+", output)
    if something_failed:
        internal_print_and_log(".....scr_srun called a function that returned with error code")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 19.d failed - scr_srun called a "
                          "function that returned with error code.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 19.d passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 19.d passed\n")
        output_file.close()

    if p.returncode != 0:
        internal_print_and_log(".....scr_srun returned an error code")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write("SCR_BAT test 19.e failed - scr_srun returned an "
                          "error code.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 19.e passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 19.e passed\n")
        output_file.close()

    p = Popen([os.path.join(scrbin, 'scr_index'),
               '--list'],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    output = p.stdout.read()
    internal_print_and_log(output)
    current_line = re.search("\*.*", output)
    eighteen_line = re.search(".* 18 .*", output)
    twelve_line = re.search(".* 12 .*", output)
    six_line = re.search(".* 6 .*", output)
    if current_line and eighteen_line and twelve_line and six_line:
        current_line = current_line.group(0).split()
        eighteen_line = eighteen_line.group(0).split()
        twelve_line = twelve_line.group(0).split()
        six_line = six_line.group(0).split()
        if current_line[1] != "24" or eighteen_line[0] != "18" or \
                twelve_line[0] != "12" or six_line[0] != "6":
            internal_print_and_log(".....scr_index --list failed, incorrect datasets recorded")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write(
                "SCR_BAT test 19.f failed - scr_index --list failed, "
                "incorrect datasets recorded.")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 19.f passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 19.f passed\n")
            output_file.close()
        if eighteen_line[1] != "YES" or twelve_line[1] != "NO" or \
                six_line[1] != "YES" or current_line[2] != "YES":
            internal_print_and_log(".....scr failed to mark dataset 12 as invalid and datasets "
                  "6, 18, and 24 as valid")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\nSCR_BAT_FAILURE\n")
            output_file.write(
                "SCR_BAT test 19.g failed - scr failed to mark dataset 12 as "
                "invalid and datasets 6, 18, and 24 as valid.")
            output_file.close()
            ret = 1
        else:
            internal_print_and_log("\n......SCR_BAT test 19.g passed")
            output_file = open(global_combined_log_file, 'a')
            output_file.write("\n......SCR_BAT test 19.g passed\n")
            output_file.close()

        internal_print_and_log("\n......SCR_BAT test 19.h passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 19.h passed\n")
        output_file.close()
    else:
        internal_print_and_log(".....scr_index --list failed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write(
            "SCR_BAT test 19.h failed - scr_index --list failed.")
        output_file.close()
        ret = 1

    num_entries = len(re.findall(".* \d+ .*", output))
    # % entries because flush=10, so 6,12,18,20,24 flush
    if num_entries != 5:
        internal_print_and_log(".....wrong number of index entries")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_FAILURE\n")
        output_file.write(
            "SCR_BAT test 19.i failed - wrong number of index entries.")
        output_file.close()
        ret = 1
    else:
        internal_print_and_log("\n......SCR_BAT test 19.i passed")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\n......SCR_BAT test 19.i passed\n")
        output_file.close()
    #endregion


    #region Test 20
    #perform a new run with cppr async flushes, delete cache files, ensure restart from PFS succeeds
    os.environ['SCR_FETCH'] = str(1)
    os.environ['SCR_FLUSH_ASYNC'] = str(1)
    os.environ['SCR_FLUSH'] = str(2)

    #TODOS: PARSE OUTPUT, CHECK FOR ASYNC FLUSHES AND FOR PROPER RESTART FROM CHECKPOINT 3 AFTER DELETING CHECKPOINT 6

    #delete all files from previous runs
    # clean out any cruft from previous runs
    # deletes files from cache and any halt, flush, nodes files
    if os.path.exists(
            os.path.join("/tmp/automation/scr", build_number, "scr_cache")):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   'rm', '-rf',
                   os.path.join(
                       "/tmp/automation/scr",
                       build_number,
                       "scr_cache"),
                   os.path.join(
                       "/tmp/automation/scr/",
                       build_number,
                       "scr_control")])
        p.wait()

    try:
        os.remove(os.path.join(scr_prefix, ".scr/flush.scr"))
    except OSError as err:
        internal_print_and_log("couldn't remove flush.scr files: {0}".format(str(err)))

    try:
        os.remove(os.path.join(scr_prefix, ".scr/halt.scr"))
    except OSError as err:
        internal_print_and_log("couldn't remove halt.scr files: {0}".format(str(err)))

    try:
        os.remove(os.path.join(scr_prefix, ".scr/nodes.scr"))
    except OSError as err:
        internal_print_and_log("couldn't remove nodes.scr files: {0}".format(str(err)))

    try:
        os.remove(os.path.join(scr_prefix, ".scr/index.scr"))
    except OSError as err:
        internal_print_and_log("couldn't remove index.scr files: {0}".format(str(err)))

    #remove the flushed datasets on the global mount
    p = Popen('rm -rf ' + os.path.join(scr_prefix, "scr.dataset.*"), shell=True)
    p.wait()
        
    tmp_jobid_dir = os.path.join("/tmp", "automation", "scr", build_number,
                                 "scr_cache", os.environ["USER"],
                                 "scr." + jobid)
    ssd_jobid_dir = os.path.join("/ssd", "automation", "scr", build_number,
                                 "scr_cache", os.environ["USER"],
                                 "scr." + jobid)

    internal_print_and_log("-----------------------------------------------------------")
    # delete all files from all nodes

    if os.path.exists(tmp_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   tmp_jobid_dir])
        p.wait()
    if os.path.exists(ssd_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   ssd_jobid_dir])
        p.wait()

    # perform the new run
    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()

    output = cleanup_and_return_log_output()


    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([1, 2, 3, 4, 5, 6]):
        internal_print_and_log(completed_checkpoints)
        internal_print_and_log("\n.....SCR_BAT test 20 full-restart with cppr async flushes test failed")
        ret = 1
    else:
        internal_print_and_log("\nSCR_BAT test 20 full-restart with cppr async flushes test passed")
    #endregion
    
    #region Cache/Control dir cleanup
    internal_print_and_log("-----------------------------------------------------------")

    # clear the cache and control directory
    if os.path.exists(tmp_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   tmp_jobid_dir])
        p.wait()
    if os.path.exists(ssd_jobid_dir):
        p = Popen(['scr_pmix_spawn',
                   '-n', '4',
                   '-N', '1',
                   '-B', short_sleep,
                   '/bin/rm', '-rf',
                   ssd_jobid_dir])
        p.wait()

    p = Popen([os.path.join(scrbin, "scr_halt"),
               '-r', os.getcwd()],
              stderr=STDOUT,
              stdout=PIPE)
    p.wait()
    internal_print_and_log("halt file update: "+p.stdout.read())

    #perform new run, where we expect to restart from checkpoint 4 becuase we delete 6
    p = Popen('rm -rf ' + os.path.join(scr_prefix, "scr.dataset.6"), shell=True)
    p.wait()

    p = Popen(['scr_pmix_spawn',
               '-P',
               '-n', '4',
               '-N', '1',
               '-B', long_sleep,
               '-x', 'CNSS_PREFIX',
               '-x', 'SCR',
               '-x', 'LD_LIBRARY_PATH',
               '-x', 'PATH',
               path_to_scr_test_api,
               nl_logging_files])
    p.wait()

    output = cleanup_and_return_log_output()

    completion_statements = re.findall("Completed checkpoint \d+", output)
    completed_checkpoints = []
    for s in completion_statements:
        ckpt = re.search("\d+", s)
        completed_checkpoints.append(int(ckpt.group(0)))
    if set(completed_checkpoints) != set([5, 6, 7, 8, 9, 10]):
        internal_print_and_log(completed_checkpoints)
        internal_print_and_log("\n.....SCR_BAT test 21 restart with cppr async flushes test failed")
        ret = 1
    else:
        internal_print_and_log("\nSCR_BAT test 21 restart with cppr async flushes test passed")

    #endregion

    if ret == 0:
        internal_print_and_log("......SCR_BAT_SUCCESS")
        output_file = open(global_combined_log_file, 'a')
        output_file.write("\nSCR_BAT_SUCCESS\n")
        output_file.close()

    # set return code back to 0.  should only return non zero if there was an
    # "unexpected" type of error.  If we get to this point, we still want
    # scr_bat_wrapper to parse the output file and see which test failed
    ret = 0
    exit(ret)


main()
